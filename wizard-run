#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-AutoUpdate" created 04/2017 by CPO for FunkFeuer.at
# Version 20170517
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: ER-wizard-AutoUpdate
#
# Github repository: https://github.com/pocki80/ER-wizard-AutoUpdate
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.0+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffautoupdatewiz.log"

#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-AutoUpdate"
gitbranch="master"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX ER-wizard-AutoUpdate Wizard started $(date +%H:%M:%S.%N)" >>$log

#base64begin 
# !dont edit or remove this comment!

cat >/config/user-data/autoupdate.sh 2>>$log <<'ENDSCRIPTINSTALL'
#!/bin/bash
#### Auto-Update wizards!
# check for applicable updates: download (6.25am) and install
updlog=/var/log/0xffautoupdate.log
hostname=$(hostname)
autoupdatewizard () {
suche="$1"; gitowner="$2"; gitrepo="$3"; gitbranch="$4"; wiz=""
echo "Performing upgrade for Wizard $suche..." >>$updlog
for i in $(find /config/wizard/feature/ -name wizard.html); do
  if [[ $(head $i -n 10 | grep "$suche") ]]; then
    wiz=$i
    break
  fi
done
if [ ! $wiz ]; then echo "  error: $suche wizard.html not found!" >>$updlog; 
else
  # avoid all router to start in the same very second
  sleep $[ ( $RANDOM % 10 ) ]s
  CURRENTVERSION=$(head -n 8 $wiz | grep -i versioninfo= | awk -F"=" {'print $2'})
  GITVERSIONDATA=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -iE "versioninfo=|autoupdate=")
  GITVERSION=$(echo  "$GITVERSIONDATA" | grep -i versioninfo= | awk -F"=" {'print $2'})
  AUTOVERSION=$(echo "$GITVERSIONDATA" | grep -i autoupdate=  | awk -F"=" {'print $2'})
  install=""
  if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
    if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ] && [ "$AUTOVERSION" ] && [ "$GITVERSION" == "$AUTOVERSION" ]; then 
      echo "  new version "$GITVERSION" is enabled to auto-update!" >>$updlog
      curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=updating%20$gitrepo%20$CURRENTVERSION%20to%20$GITVERSION&r=$hostname" >/dev/null 2>/dev/null
      install="1"
    elif [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
      echo "  new version "$GITVERSION" (current: "$CURRENTVERSION") is not enabled to auto-update" >>$updlog
      curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=keep%20$gitrepo%20$CURRENTVERSION%20ignore%20$GITVERSION&r=$hostname" >/dev/null 2>/dev/null
    elif [ $(($GITVERSION)) == $(($CURRENTVERSION)) ]; then 
      echo "  current version "$CURRENTVERSION" is up-to-date" >>$updlog
    elif [ $(($GITVERSION)) \< $(($CURRENTVERSION)) ]; then 
      echo "  current version "$CURRENTVERSION" is newer than version "$GITVERSION" on github" >>$updlog
      curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=ahead%20$gitrepo%20$CURRENTVERSION%20over%20$GITVERSION&r=$hostname" >/dev/null 2>/dev/null
    fi
    if [ "$install" ]; then
      echo "  Downloading "$(dirname $wiz)"..." >>$updlog
      curl -sL -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$updlog 2>>$updlog
      tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$updlog
      rm -f       /tmp/ER-wizard.tar.gz 2>>$updlog
      while read LINE; do
        set $LINE
        if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
        [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE)
      done < /tmp/result.txt
      rm /tmp/result.txt
      rm -Rf /tmp/$gitowner-$gitrepo* 
      chmod 755 $(dirname $wiz)"/"wizard-run 2>>$updlog
      echo "  Update done, now scheduling initial load..." >>$updlog
      echo "echo \"Triggering load for "$gitrepo"\" >>"$updlog >>/tmp/autoupdateexecute.sh
      if [ "$suche" == "OLSR""d_V1" ] || [ "$suche" == "OLSR""d_V2" ]; then
        #wait 8 seconds on olsrd-upgrade before going on 
        echo "curl -so /dev/null --connect-timeout 2 --speed-time 2 \"http://ff.cybercomm.at/aulog/logthis.php?w=delayload%20$gitrepo&r="$hostname"\" >/dev/null 2>/dev/null" >>/tmp/autoupdateexecute.sh
        echo $(dirname $wiz)"/wizard-run load >>"$updlog >>/tmp/autoupdateexecute.sh
        echo "sleep 8" >>/tmp/autoupdateexecute.sh
      else
        # wizards not critical to connection can be installed without delays
        echo "curl -so /dev/null --connect-timeout 2 --speed-time 2 \"http://ff.cybercomm.at/aulog/logthis.php?w=load%20$gitrepo&r="$hostname"\" >/dev/null 2>/dev/null" >>/tmp/autoupdateexecute.sh
        echo $(dirname $wiz)"/wizard-run load >>"$updlog >>/tmp/autoupdateexecute.sh
      fi
      echo "curl -so /dev/null --connect-timeout 2 --speed-time 2 \"http://ff.cybercomm.at/aulog/logthis.php?w=done%20$gitrepo&r="$hostname"\" >/dev/null 2>/dev/null" >>/tmp/autoupdateexecute.sh
    fi
  fi
fi
}

v4iphost='8.8.8.8'
v4dnshost='www.google.com'
v6iphost='2001:4860:4860::8888'
v6dnshost='www.google.com'
# function to check if connectivity is given to download packages
onlinecheck () {
    ping="ping -c 1 -W 1 ";
    ping6="ping6 -c 1 -W 1 ";
    $ping $v4iphost > /dev/null
    if [[ $? == 0 ]]; then
        $ping6 $v6iphost > /dev/null
        if [[ $? == 0 ]]; then
            $ping6 $v6dnshost > /dev/null
            if [[ $? == 0 ]]; then
                return 0
            else
                return 1
            fi
        else
            $ping $v4dnshost > /dev/null
            if [[ $? == 0 ]]; then
                return 0
            else
                return 1
            fi
        fi
    else
        return 1
    fi
}

start () {
  echo "CRONJOB started $(date +%d.%m.%Y-%H:%M:%S.%N)" >>$updlog
  curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=init&r=$hostname" >/dev/null 2>/dev/null
  echo "#!/bin/bash" >/tmp/autoupdateexecute.sh
  # try to update all wizards with autoupdate enabled
  if [ $((onlinecheck)) = 0 ] && [ -f /config/user-data/autoupdate.dat ]; then
    for u in $(grep "=yes" /config/user-data/autoupdate.dat | awk -F= {'print $1'}); do
      [ "$u" == "wizard-0xffwsle" ]   && autoupdatewizard 0xFF-BMK-Webstatus-LetsEncrypt pocki80 ER-wizard-0xFF-WSLE master
      [ "$u" == "wizard-olsr""d_v2" ]   && autoupdatewizard OLSR""d_V2 pocki80 ER-wizard-OLSR""d_V2 master
      [ "$u" == "wizard-olsr""d_v1" ]   && autoupdatewizard OLSR""d_V1 vchrizz ER-wizard-OLSR""d_V1 master
      [ "$u" == "wizard-""ebtables" ]   && autoupdatewizard ER-wizard-ebtables pocki80 ER-wizard-ebtables master
      [ "$u" == "wizard-""autoupdate" ] && autoupdatewizard ER-wizard-AutoUpdate pocki80 ER-wizard-AutoUpdate master
    done
  else
    echo "currently offline or no autoupdate.dat" >>$updlog
  fi
  if [ "$(cat /tmp/autoupdateexecute.sh | wc -l)" \> 1 ]; then
    echo "sleep 3" >>/tmp/autoupdateexecute.sh
    echo "curl -so /dev/null --connect-timeout 2 --speed-time 2 \"http://ff.cybercomm.at/aulog/logthis.php?w=finish&r="$hostname"\" >/dev/null 2>/dev/null" >>/tmp/autoupdateexecute.sh
    echo "echo \".\" >>"$updlog >>/tmp/autoupdateexecute.sh
    chmod 755 /tmp/autoupdateexecute.sh
    curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=schedule&r=$hostname" >/dev/null 2>/dev/null
    at now +2min -f /tmp/autoupdateexecute.sh >>$updlog 2>/dev/null
  else
    sleep 3
    curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=finish&r=$hostname" >/dev/null 2>/dev/null
    echo "." >>$updlog
  fi
  rm /tmp/autoupdateexecute.sh
}

start
exit 0
ENDSCRIPTINSTALL
chmod 755 /config/user-data/autoupdate.sh >>$log 2>>$log

cat >/config/scripts/post-config.d/autoupdatecron.sh 2>>$log <<'ENDSCRIPTINSTALL'
#!/bin/bash
#### Auto-Update wizards
# check for cronjob, re-establish daily start
if [ -f /config/user-data/autoupdate.sh ] &&
   [ -f /config/user-data/autoupdate.dat ] &&
   [ ! -L /etc/cron.daily/autoupdatewizards ]; then
    ln -sf /config/user-data/autoupdate.sh /etc/cron.daily/autoupdatewizards
fi
exit 0
ENDSCRIPTINSTALL
chmod 755 /config/scripts/post-config.d/autoupdatecron.sh >>$log 2>>$log

if [ ! -f /config/user-data/autoupdate.dat ]; then
    #create settings file if missing, default auto-update autoupdate-wizard
    echo 'wizard-autoupdate=yes' >/config/user-data/autoupdate.dat 2>>$log
    echo '' >>/config/user-data/autoupdate.dat 2>>$log
    sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
    curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=setup&r=$(hostname)" >/dev/null 2>/dev/null
fi

# check for cronjob, re-establish daily start
if [ -f /config/user-data/autoupdate.sh ] &&
   [ -f /config/user-data/autoupdate.dat ] &&
   [ ! -L /etc/cron.daily/autoupdatewizards ]; then
    ln -sf /config/user-data/autoupdate.sh /etc/cron.daily/autoupdatewizards
fi

# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log
    packagestatus='"packagestatus":"ok"'

    onlinetest=$((onlinecheck))

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -iv olsr); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-AutoUpdate') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: Auto-Update wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $onlinetest = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    ####### search for installed/supported wizards
    #
    for i in $(find /config/wizard/feature/ -name wizard.html); do
        name=$(echo $i | awk -F/ {'print $5'})
        wizstatus=""
        internal=""
        infotext=""
        ## fool status-script with '' or ""
        if [[ $(head $i -n 10 | grep 'ER-wizard-''AutoUpdate') ]]; then
            internal="wizard-autoupdate"
            if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "$internal=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
                wizstatus='"enabled":"on",'
            fi 
            gitowner="pocki80"
            gitrepo="ER-wizard-Auto""Update"
            gitbranch="master"
        elif [[ $(head $i -n 10 | grep 'OLSR''d_V1') ]]; then
            internal="wizard-olsrd_v1"
            if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "$internal=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
                wizstatus='"enabled":"on",'
            fi 
            gitowner="vchrizz"
            gitrepo="ER-wizard-OLSR""d_V1"
            gitbranch="master"
        elif [[ $(head $i -n 10 | grep 'OLSR''d_V2') ]]; then
            internal="wizard-olsrd_v2"
            if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "$internal=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
                wizstatus='"enabled":"on",'
            fi 
            gitowner="pocki80"
            gitrepo="ER-wizard-OLSR""d_V2"
            gitbranch="master"
        elif [[ $(head $i -n 10 | grep '0xFF-BMK-''Webstatus-LetsEncrypt') ]]; then
            internal="wizard-0xffwsle"
            if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "$internal=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
                wizstatus='"enabled":"on",'
            fi 
            gitowner="pocki80"
            gitrepo="ER-wizard-0xFF""-WSLE"
            gitbranch="master"
        elif [[ $(head $i -n 10 | grep 'ER-wizard-''ebtables') ]]; then
            internal="wizard-ebtables"
            if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "$internal=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
                wizstatus='"enabled":"on",'
            fi 
            gitowner="pocki80"
            gitrepo="ER-wizard-eb""tables"
            gitbranch="master"
        else
            continue
        fi
        CURRENTVERSION=$(head -n 10 $i | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $onlinetest = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available" >>$log 2>>$log
                else
                    updatetext="up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="info not available" >>$log 2>>$log
            fi
        else
            updatetext="OFFLINE" >>$log 2>>$log
            GITVERSION=""
        fi
        wizards=$wizards'{'$wizstatus'"name":"'${name}'","internal":"'${internal}'","current":"'${CURRENTVERSION}'","text":"'${updatetext}'","git":"'${GITVERSION}'"},'
    done
    wizards=${wizards%","}
    wizards=",\"wizards\":[$wizards]"
    # end
    ####### search wizards

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-autoupdate=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi

    # get all variables together for output
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus $wizards"
    echo -n " },"
    echo    " \"definition\":{ }}"
}

# function called when you click apply
apply () {
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-AutoUpdate') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: AutoUpdate-Wizard wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -sL -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-autoupdate=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-autoupdate=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-autoupdate=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-autoupdate=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-autoupdate=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-autoupdate=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-autoupdate=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=off-autoupdate&r=$(hostname)" >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github

    ####### execute cronjob just right now
    #
    executenow=$(jq -M -r '.executenow' $INPUT)
    if [[ "$executenow" == "on" ]]; then
        /config/user-data/autoupdate.sh >/dev/null 2>/dev/null
    fi
    # end
    ####### execute cronjob just right now

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-AutoUpdate Wizard ended $(date +%H:%M:%S.%N)" >> $log
