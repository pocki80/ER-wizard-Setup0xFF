#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-ebtables" created 05/2017 by CPO/BMK for FunkFeuer.at
# Version 20180127
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: ER-wizard-AutoUpdate
#
# Github repository: https://github.com/pocki80/ER-wizard-ebtables
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.0+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffebtables.log"

#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-ebtables"
gitbranch="master"

#
# DO NOT EDIT BELOW HERE !
#

echo "EdgeMAX ER-wizard-ebtables Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log

#base64begin 
# !dont edit or remove this comment!

####################
# migrate /etc/rc.local to pre-config.d/ebtables.sh if not yet done??

# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

if [ ! -f /config/scripts/pre-config.d/ebtables.sh ]; then
    echo -n "{\"success\":\"0\",\"error\":\"ebtables.sh not found\""
    echo -n " },"
    echo    " \"definition\":{ }}"
    exit 0
fi

# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log
    packagestatus='"packagestatus":"ok"'

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html | grep -iv olsr); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-ebtables') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: ER-wizard-ebtables wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -sL --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi
    
    
    ####### get bridges and their interfaces 
    # get mesh interfaces
    olsrd4default='/etc/default/olsrd'
    olsrd4meshif=$(awk -F= '/MESH_IF=/ { print $2 }' $olsrd4default | tr -d \")
    olsr2meshif=$(grep "\[interface=br" /config/olsrd2/olsrd2.conf 2>/dev/null | cut -d= -f2 | tr -d "\]")
    # get current accept-rules
    ebtablesaccept=$(ebtables -L FORWARD | sed -e '/^$/d' | grep -E "\-[io] eth.{1,6} \-j ACCEPT")
    ebtablesacceptv=$(ebtables -L FORWARD | sed -e '/^$/d' | grep -E "\-p 802_1Q \-[io] eth. --vlan-id .{1,4} \-j ACCEPT")
    # get bridges
    bridgeslist=$(/usr/sbin/brctl show | awk {'print $1","$4'})

    # generate list arrays
    for i in $bridgeslist; do
        part1=$(echo $i | cut -d"," -f1)
        [ "$part1" == "bridge" ] && continue
        part2=$(echo $i | cut -d"," -f2)
        if [ "$part2" ]; then
            bridge=$part1
            bridgestatus=""
            port=$part2
            moveon=""
        else
            port=$part1
            moveon=1
        fi
        intfstatus=""
        for this in "$ebtablesaccept"; do
            rules=$(echo "$ebtablesaccept" | grep -c " $port \-j")
        done
        [ $rules \> 0 ] && intfstatus='"enabled":"on",' && bridgestatus='"enabled":"on",'
        interfaces=$interfaces'{'$intfstatus'"interface":"'${port}'","name":"'${name}'","rules":"'${rules}'"},'
        [ "$moveon" ] && continue
        olsron=""
        if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
            olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
            for mintf in $olsrd4meshif; do
                if [[ "$mintf" == "$bridge" ]]; then
                    olsron="OLSRv1"
                fi
            done
        else
            if [[ "$olsrd4meshif" == "$bridge" ]]; then
                olsron="OLSRv1"
            fi
        fi
        [ $(echo $olsr2meshif | grep -c $bridge) \> 0 ] && olsron=$olsron"v2"
        bridges=$bridges'{"olsr":"'${olsron}'",'$bridgestatus'"bridge":"'${bridge}'","name":"'${name}'"},'
        ## now check for vifs of that bridge, i.e. br0.1100
        for v in $(ls /opt/vyatta/config/active/interfaces/bridge/$bridge/vif 2>/dev/null); do
            olsron=""
            if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
                olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
                for mintf in $olsrd4meshif; do
                    if [[ "$mintf" == "$bridge"".""$v" ]]; then
                        olsron="OLSRv1"
                    fi
                done
            else
                if [[ "$olsrd4meshif" == "$bridge"".""$v" ]]; then
                    olsron="OLSRv1"
                fi
            fi
            rules=$(echo "$ebtablesacceptv" | grep -c "vlan-id $v ")
            [ $rules \> 0 ] && bridgestatus='"enabled":"on",' || bridgestatus=''
            bridges=$bridges'{"olsr":"'${olsron}'",'$bridgestatus'"bridge":"'${bridge}'.'${v}'","name":"'${name}'"},'
        done
    done
    bridges=${bridges%","}
    interfaces=${interfaces%","}
    # end
    ####### get bridges and their interfaces 

    # get all variables together for output
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus ,\"bridges\":[$bridges],\"interfaces\":[$interfaces]"
    echo -n " },"
    echo    " \"definition\":{ }}"
}

change_port () {
    p="$1"; onoff="$2"; type="$3"; bridgevif="$4";
    # type 1: #ebtables -A FORWARD -i eth0.8 -j ACCEPT
    # type 2: #ebtables -A FORWARD -i eth0 -p 802_1Q --vlan-id 1100 -j ACCEPT
    #echo "DEBUG: changeport "$p" to "$onoff" with type "$type"("$bridgevif")" >>$log
    for dir in $(echo "i o"); do
        if [ "$type" == "1" ]; then
            string="ebtables -A FORWARD -$dir $p -j ACCEPT"
            stringlive="$dir $p -j ACCEPT"
        elif [ "$type" == "2" ]; then
            string="ebtables -A FORWARD -$dir $p -p 802_1Q --vlan-id $bridgevif -j ACCEPT"
            stringlive="p 802_1Q -$dir $p --vlan-id $bridgevif \-j ACCEPT"
        fi
        if [ "$onoff" == "off" ]; then
            linenumber=$(grep -ni "$string" /config/scripts/pre-config.d/ebtables.sh | awk -F: {'print $1'})
            if [ "$linenumber" ]; then
                echo "changeport "$p" to "$onoff" with type "$type"("$bridgevif") - remove from ebtables.sh" >>$log
                sed -i $linenumber'd' /config/scripts/pre-config.d/ebtables.sh 2>>$log
            fi
            if [ $(echo $ebtablesstate | grep -e "$stringlive" | wc -l) -eq 1 ]; then
                echo "changeport "$p" to "$onoff" with type "$type"("$bridgevif") - apply delete to ebtables" >>$log
                $(echo $string | sed -e "s/ -A / -D /g") >>$log 2>>$log
            fi
        elif [ "$onoff" == "on" ]; then
            linenumber=$(grep -ni "$string" /config/scripts/pre-config.d/ebtables.sh | awk -F: {'print $1'})
            if [ "$linenumber" == "" ]; then
                echo "changeport "$p" to "$onoff" with type "$type"("$bridgevif") - insert to ebtables.sh" >>$log
                linenumber=$(grep -ni "exit 0" /config/scripts/pre-config.d/ebtables.sh | awk -F: {'print $1'})
                sed -i $linenumber'i\
'"$string" /config/scripts/pre-config.d/ebtables.sh >>$log 2>>$log
            fi
            if [ $(echo $ebtablesstate | grep -e "$stringlive" | wc -l) -eq 0 ]; then
                echo "changeport "$p" to "$onoff" with type "$type"("$bridgevif") - apply insert to ebtables" >>$log
                $string >>$log 2>>$log
            fi
        fi
    done
    return 0
}

check_and_correct () {
    ####### get bridges and their interfaces 
    ebtablesstate=$(ebtables -L FORWARD)
    # get mesh interfaces
    olsrd4default='/etc/default/olsrd'
    olsrd4meshif=$(awk -F= '/MESH_IF=/ { print $2 }' $olsrd4default | tr -d \")
    olsr2meshif=$(grep "\[interface=br" /config/olsrd2/olsrd2.conf 2>/dev/null | cut -d= -f2 | tr -d "\]")

    # loop bridges and bridge-vif for all member-ports
    for i in $(ls /opt/vyatta/config/active/interfaces/bridge/ 2>/dev/null); do
        portlist=()
        olsron=""
        if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
            olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
            for mintf in $olsrd4meshif; do
                if [[ "$mintf" == "$i" ]]; then
                    olsron="OLSRv1"
                fi
            done
        else
            if [[ "$olsrd4meshif" == "$i" ]]; then
                olsron="OLSRv1"
            fi
        fi
        [ $(echo $olsr2meshif | grep -c $i) \> 0 ] && olsron=$olsron"v2"
        [ "$ACTION" == "apply" ] && userrequest=$(jq -M -r '.bridges[] | select (.bridge=="'$i'") | .enabled' $INPUT)
        if [ "$olsron" ]; then
            portonoff="off"
        elif [ "$ACTION" == "apply" ] && [ "$userrequest" == "on" ]; then
            portonoff="on"
        elif [ "$ACTION" == "apply" ]; then
            portonoff="off"
        else 
            portonoff=""
        fi
        for m in $(/usr/sbin/brctl show $i | awk {'print $1","$4'}); do
            part1=$(echo $m | cut -d"," -f1)
            [ "$part1" == "bridge" ] && continue
            part2=$(echo $m | cut -d"," -f2)
            if [ "$part2" ]; then
                port=$part2
            else
                port=$part1
            fi
            portlist[${#portlist[@]}]=$port
            [ "$portonoff" ] && change_port $port $portonoff 1
        done
        vs=$(ls /opt/vyatta/config/active/interfaces/bridge/$i/vif 2>/dev/null)
        if [ "$vs" ]; then
            for v in $(ls /opt/vyatta/config/active/interfaces/bridge/$i/vif 2>/dev/null); do
                olsron=""
                if [[ "$olsrd4meshif" != "${olsrd4meshif/ /}" ]]; then
                    olsrd4meshif=$(echo $olsrd4meshif | tr -d \")
                    for mintf in $olsrd4meshif; do
                        if [[ "$mintf" == "$i"".""$v" ]]; then
                            olsron="OLSRv1"
                        fi
                    done
                else
                    if [[ "$olsrd4meshif" == "$i"".""$v" ]]; then
                        olsron="OLSRv1"
                    fi
                fi
                [ "$ACTION" == "apply" ] && userrequest=$(jq -M -r '.bridges[] | select (.bridge=="'$i'.'$v'") | .enabled' $INPUT)
                if [ "$olsron" ]; then
                    portonoff="off"
                elif [ "$ACTION" == "apply" ] && [ "$userrequest" == "on" ]; then
                    portonoff="on"
                elif [ "$ACTION" == "apply" ]; then
                    portonoff="off"
                else
                    portonoff=""
                fi
                for p in "${portlist[@]}"; do
                    [ "$portonoff" ] && change_port $p $portonoff 2 $v
                done
            done
        fi
    done

    #now check for FORWARD of ports that are no longer in a bridge - and remove
    for vif in $(grep -E "^ebtables -A FORWARD -. eth. -p 802_1Q --vlan-id" /config/scripts/pre-config.d/ebtables.sh | awk {'print $4","$5","$9'}); do
        d=$(echo $vif | cut -d, -f1 | tr -d "-")
        p=$(echo $vif | cut -d, -f2)
        v=$(echo $vif | cut -d, -f3)
        pp=$(echo $p | sed -e "s/\./\/vif\//g" | sed -e "s/eth/ethernet\/eth/g" | sed -e "s/switch/switch\/switch/g")
        if [ ! -f /opt/vyatta/config/active/interfaces/$pp/bridge-group/bridge/node.val ]; then
            change_port $p "off" 2 $v
        fi
    done
    for br in $(grep -E "^ebtables -A FORWARD -. eth.{1,6} -j ACCEPT" /config/scripts/pre-config.d/ebtables.sh | awk {'print $4","$5'}); do
        d=$(echo $br | cut -d, -f1 | tr -d "-")
        p=$(echo $br | cut -d, -f2)
        pp=$(echo $p | sed -e "s/\./\/vif\//g" | sed -e "s/eth/ethernet\/eth/g" | sed -e "s/switch/switch\/switch/g")
        if [ ! -f /opt/vyatta/config/active/interfaces/$pp/bridge-group/bridge/node.val ]; then
            change_port $p "off" 1
        fi
    done

    #remove EBTABLES for interfaces that no longer exist - and remove
    ebtablesstate=$(ebtables -L FORWARD)
    for vif in $(echo "$ebtablesstate" | grep -E "^-p 802_1Q -. eth. --vlan-id" | awk {'print $3","$4","$6'}); do
        d=$(echo $vif | cut -d, -f1 | tr -d "-")
        p=$(echo $vif | cut -d, -f2)
        v=$(echo $vif | cut -d, -f3)
        pp=$(echo $p | sed -e "s/\./\/vif\//g" | sed -e "s/eth/ethernet\/eth/g" | sed -e "s/switch/switch\/switch/g")
        if [ ! -f /opt/vyatta/config/active/interfaces/$pp/bridge-group/bridge/node.val ]; then
            change_port $p "off" 2 $v
        fi
    done
    for br in $(echo "$ebtablesstate" | grep -E "^-. eth.{1,6} -j ACCEPT" | awk {'print $1","$2'}); do
        d=$(echo $br | cut -d, -f1 | tr -d "-")
        p=$(echo $br | cut -d, -f2)
        pp=$(echo $p | sed -e "s/\./\/vif\//g" | sed -e "s/eth/ethernet\/eth/g" | sed -e "s/switch/switch\/switch/g")
        if [ ! -f /opt/vyatta/config/active/interfaces/$pp/bridge-group/bridge/node.val ]; then
            change_port $p "off" 1
        fi
    done
    return 0
}

# function called when you click apply
apply () {
    echo "Apply procedure..." >>$log
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-ebtables') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: ER-wizard-ebtables wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -sL -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://api.github.com/repos/$gitowner/$gitrepo/tarball >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20171122, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-ebtables=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-ebtables=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-ebtables=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-ebtables=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-ebtables=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-ebtables=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "http://ff.cybercomm.at/aulog/logthis.php?w=off-ebtables&r=$(hostname)" >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

# always perform modification: remove OLSR bridges or inexistent ports
# only on apply: remove/add custom ALLOW entries
check_and_correct

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-ebtables Wizard ended $(date +%Y-%m-%d/%H:%M:%S.%N)" >>$log
